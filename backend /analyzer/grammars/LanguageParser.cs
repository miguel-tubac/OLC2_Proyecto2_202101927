//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, ID=62, INT=63, FLOAT=64, STRING=65, RUNE=66, WS=67, 
		LINEALCOMENT=68, BlockComment=69;
	public const int
		RULE_program = 0, RULE_declaraciones = 1, RULE_declararvar = 2, RULE_datos = 3, 
		RULE_filasMatriz = 4, RULE_filaMatriz = 5, RULE_instStruct = 6, RULE_listaAtributos = 7, 
		RULE_funcDcl = 8, RULE_params = 9, RULE_stmt = 10, RULE_forInit = 11, 
		RULE_instCase = 12, RULE_instDefault = 13, RULE_asignacion = 14, RULE_expr = 15, 
		RULE_llamada = 16, RULE_args = 17, RULE_booll = 18, RULE_tipos = 19;
	public static readonly string[] ruleNames = {
		"program", "declaraciones", "declararvar", "datos", "filasMatriz", "filaMatriz", 
		"instStruct", "listaAtributos", "funcDcl", "params", "stmt", "forInit", 
		"instCase", "instDefault", "asignacion", "expr", "llamada", "args", "booll", 
		"tipos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "':='", "'['", "']'", "'{'", "','", "'}'", 
		"':'", "'type'", "'struct'", "'func'", "'('", "')'", "'fmt'", "'.'", "'Println'", 
		"'if'", "'else'", "'switch'", "'for'", "'range'", "'break'", "'continue'", 
		"'return'", "'case'", "'default'", "'+='", "'-='", "'++'", "'--'", "'strconv.Atoi'", 
		"'strconv.ParseFloat'", "'reflect.TypeOf'", "'slices.Index'", "'strings.Join'", 
		"'len'", "'append'", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'>'", 
		"'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", "'nil'", "'true'", 
		"'false'", "'int'", "'float64'", "'bool'", "'string'", "'rune'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "ID", "INT", "FLOAT", "STRING", "RUNE", "WS", "LINEALCOMENT", 
		"BlockComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4485580839280088958L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) {
				{
				{
				State = 40;
				declaraciones();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaracionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclararvarContext declararvar() {
			return GetRuleContext<DeclararvarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDclContext funcDcl() {
			return GetRuleContext<FuncDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstStructContext instStruct() {
			return GetRuleContext<InstStructContext>(0);
		}
		public DeclaracionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaraciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaraciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclaracionesContext declaraciones() {
		DeclaracionesContext _localctx = new DeclaracionesContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaraciones);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				declararvar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47;
				stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 48;
				funcDcl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 49;
				instStruct();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclararvarContext : ParserRuleContext {
		public DeclararvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declararvar; } }
	 
		public DeclararvarContext() { }
		public virtual void CopyFrom(DeclararvarContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SliceInicialiContext : DeclararvarContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos() {
			return GetRuleContext<TiposContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SliceInicialiContext(DeclararvarContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceIniciali(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SliceNoIncialContext : DeclararvarContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos() {
			return GetRuleContext<TiposContext>(0);
		}
		public SliceNoIncialContext(DeclararvarContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceNoIncial(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructParamContext : DeclararvarContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatosContext[] datos() {
			return GetRuleContexts<DatosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatosContext datos(int i) {
			return GetRuleContext<DatosContext>(i);
		}
		public StructParamContext(DeclararvarContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructParam(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimeraDeclContext : DeclararvarContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos() {
			return GetRuleContext<TiposContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrimeraDeclContext(DeclararvarContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimeraDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReasignarSliceContext : DeclararvarContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos() {
			return GetRuleContext<TiposContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ReasignarSliceContext(DeclararvarContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReasignarSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SegundaDeclContext : DeclararvarContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SegundaDeclContext(DeclararvarContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegundaDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MatrisContext : DeclararvarContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos() {
			return GetRuleContext<TiposContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilasMatrizContext filasMatriz() {
			return GetRuleContext<FilasMatrizContext>(0);
		}
		public MatrisContext(DeclararvarContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatris(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclararvarContext declararvar() {
		DeclararvarContext _localctx = new DeclararvarContext(Context, State);
		EnterRule(_localctx, 4, RULE_declararvar);
		int _la;
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new PrimeraDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				Match(T__0);
				State = 53;
				Match(ID);
				State = 54;
				tipos();
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 55;
					Match(T__1);
					State = 56;
					expr(0);
					}
				}

				State = 59;
				Match(T__2);
				}
				break;
			case 2:
				_localctx = new SegundaDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				Match(ID);
				State = 62;
				Match(T__3);
				State = 63;
				expr(0);
				State = 64;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new SliceInicialiContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 66;
				Match(ID);
				State = 67;
				Match(T__3);
				State = 68;
				Match(T__4);
				State = 69;
				Match(T__5);
				State = 70;
				tipos();
				State = 71;
				Match(T__6);
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 8733421127335937L) != 0)) {
					{
					{
					State = 72;
					expr(0);
					State = 74;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__7) {
						{
						State = 73;
						Match(T__7);
						}
					}

					}
					}
					State = 80;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 81;
				Match(T__8);
				State = 82;
				Match(T__2);
				}
				break;
			case 4:
				_localctx = new SliceNoIncialContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 84;
				Match(T__0);
				State = 85;
				Match(ID);
				State = 86;
				Match(T__4);
				State = 87;
				Match(T__5);
				State = 88;
				tipos();
				State = 89;
				Match(T__2);
				}
				break;
			case 5:
				_localctx = new MatrisContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 91;
				Match(ID);
				State = 92;
				Match(T__3);
				State = 93;
				Match(T__4);
				State = 94;
				Match(T__5);
				State = 95;
				Match(T__4);
				State = 96;
				Match(T__5);
				State = 97;
				tipos();
				State = 98;
				Match(T__6);
				State = 99;
				filasMatriz();
				State = 100;
				Match(T__8);
				State = 101;
				Match(T__2);
				}
				break;
			case 6:
				_localctx = new StructParamContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 103;
				Match(ID);
				State = 104;
				Match(T__3);
				State = 105;
				Match(ID);
				State = 106;
				Match(T__6);
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ID) {
					{
					{
					State = 107;
					datos();
					}
					}
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 113;
				Match(T__8);
				}
				break;
			case 7:
				_localctx = new ReasignarSliceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 114;
				Match(ID);
				State = 115;
				Match(T__1);
				State = 116;
				Match(T__4);
				State = 117;
				Match(T__5);
				State = 118;
				tipos();
				State = 119;
				Match(T__6);
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 8733421127335937L) != 0)) {
					{
					{
					State = 120;
					expr(0);
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__7) {
						{
						State = 121;
						Match(T__7);
						}
					}

					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 129;
				Match(T__8);
				State = 130;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public DatosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatosContext datos() {
		DatosContext _localctx = new DatosContext(Context, State);
		EnterRule(_localctx, 6, RULE_datos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(ID);
			State = 135;
			Match(T__9);
			State = 136;
			expr(0);
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 137;
				Match(T__7);
				State = 141;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 138;
					Match(ID);
					State = 139;
					Match(T__9);
					State = 140;
					expr(0);
					}
					break;
				}
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilasMatrizContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilaMatrizContext[] filaMatriz() {
			return GetRuleContexts<FilaMatrizContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilaMatrizContext filaMatriz(int i) {
			return GetRuleContext<FilaMatrizContext>(i);
		}
		public FilasMatrizContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filasMatriz; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilasMatriz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilasMatrizContext filasMatriz() {
		FilasMatrizContext _localctx = new FilasMatrizContext(Context, State);
		EnterRule(_localctx, 8, RULE_filasMatriz);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			filaMatriz();
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 149;
				Match(T__7);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 150;
					filaMatriz();
					}
				}

				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilaMatrizContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FilaMatrizContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filaMatriz; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilaMatriz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilaMatrizContext filaMatriz() {
		FilaMatrizContext _localctx = new FilaMatrizContext(Context, State);
		EnterRule(_localctx, 10, RULE_filaMatriz);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(T__6);
			State = 159;
			expr(0);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 160;
				Match(T__7);
				State = 161;
				expr(0);
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstStructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListaAtributosContext[] listaAtributos() {
			return GetRuleContexts<ListaAtributosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListaAtributosContext listaAtributos(int i) {
			return GetRuleContext<ListaAtributosContext>(i);
		}
		public InstStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instStruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstStructContext instStruct() {
		InstStructContext _localctx = new InstStructContext(Context, State);
		EnterRule(_localctx, 12, RULE_instStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(T__10);
			State = 170;
			Match(ID);
			State = 171;
			Match(T__11);
			State = 172;
			Match(T__6);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 173;
				listaAtributos();
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListaAtributosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos() {
			return GetRuleContext<TiposContext>(0);
		}
		public ListaAtributosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listaAtributos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListaAtributos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListaAtributosContext listaAtributos() {
		ListaAtributosContext _localctx = new ListaAtributosContext(Context, State);
		EnterRule(_localctx, 14, RULE_listaAtributos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(ID);
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
				{
				State = 182;
				tipos();
				}
				break;
			case ID:
				{
				State = 183;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 186;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDclContext : ParserRuleContext {
		public FuncDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDcl; } }
	 
		public FuncDclContext() { }
		public virtual void CopyFrom(FuncDclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncStructContext : FuncDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos() {
			return GetRuleContext<TiposContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public FuncStructContext(FuncDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncDcl1Context : FuncDclContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos() {
			return GetRuleContext<TiposContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public FuncDcl1Context(FuncDclContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDcl1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDclContext funcDcl() {
		FuncDclContext _localctx = new FuncDclContext(Context, State);
		EnterRule(_localctx, 16, RULE_funcDcl);
		int _la;
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new FuncDcl1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				Match(T__12);
				State = 189;
				Match(ID);
				State = 190;
				Match(T__13);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 191;
					@params();
					}
				}

				State = 194;
				Match(T__14);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4467570830351532032L) != 0)) {
					{
					State = 195;
					tipos();
					}
				}

				State = 198;
				Match(T__6);
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4485580839280088958L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) {
					{
					{
					State = 199;
					declaraciones();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 205;
				Match(T__8);
				}
				break;
			case 2:
				_localctx = new FuncStructContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				Match(T__12);
				State = 207;
				Match(T__13);
				State = 208;
				Match(ID);
				State = 209;
				Match(ID);
				State = 210;
				Match(T__14);
				State = 211;
				Match(ID);
				State = 212;
				Match(T__13);
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 213;
					@params();
					}
				}

				State = 216;
				Match(T__14);
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4467570830351532032L) != 0)) {
					{
					State = 217;
					tipos();
					}
				}

				State = 220;
				Match(T__6);
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4485580839280088958L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) {
					{
					{
					State = 221;
					declaraciones();
					}
					}
					State = 226;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 227;
				Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext[] tipos() {
			return GetRuleContexts<TiposContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiposContext tipos(int i) {
			return GetRuleContext<TiposContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 18, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(ID);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4467570830351532032L) != 0)) {
				{
				State = 231;
				tipos();
				}
			}

			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 234;
				Match(T__7);
				State = 235;
				Match(ID);
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4467570830351532032L) != 0)) {
					{
					State = 236;
					tipos();
					}
				}

				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpreStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExpreStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpreStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStmtContext : StmtContext {
		public ContinueStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfstatContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IfstatContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public WhileStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SoloPasarContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		public SoloPasarContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoloPasar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStmtContext : StmtContext {
		public BreakStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BloqueSenteContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public BloqueSenteContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloqueSente(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrinStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PrinStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrinStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForSliceContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(LanguageParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(LanguageParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForSliceContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForSlice(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		public ForStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStmtContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstrucSwitchContext : StmtContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstCaseContext[] instCase() {
			return GetRuleContexts<InstCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstCaseContext instCase(int i) {
			return GetRuleContext<InstCaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstDefaultContext instDefault() {
			return GetRuleContext<InstDefaultContext>(0);
		}
		public InstrucSwitchContext(StmtContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrucSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_stmt);
		int _la;
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				_localctx = new ExpreStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				expr(0);
				State = 245;
				Match(T__2);
				}
				break;
			case 2:
				_localctx = new PrinStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(T__15);
				State = 248;
				Match(T__16);
				State = 249;
				Match(T__17);
				State = 250;
				Match(T__13);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 8733421127335937L) != 0)) {
					{
					{
					State = 251;
					expr(0);
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__7) {
						{
						State = 252;
						Match(T__7);
						}
					}

					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 260;
				Match(T__14);
				State = 261;
				Match(T__2);
				}
				break;
			case 3:
				_localctx = new BloqueSenteContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 262;
				Match(T__6);
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4485580839280088958L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) {
					{
					{
					State = 263;
					declaraciones();
					}
					}
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 269;
				Match(T__8);
				}
				break;
			case 4:
				_localctx = new SoloPasarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 270;
				asignacion();
				State = 271;
				Match(T__2);
				}
				break;
			case 5:
				_localctx = new IfstatContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 273;
				Match(T__18);
				State = 274;
				expr(0);
				State = 275;
				stmt();
				State = 278;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 276;
					Match(T__19);
					{
					State = 277;
					stmt();
					}
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new InstrucSwitchContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 280;
				Match(T__20);
				State = 281;
				expr(0);
				State = 282;
				Match(T__6);
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__26) {
					{
					{
					State = 283;
					instCase();
					}
					}
					State = 288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__27) {
					{
					State = 289;
					instDefault();
					}
				}

				State = 292;
				Match(T__8);
				}
				break;
			case 7:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 294;
				Match(T__21);
				State = 295;
				expr(0);
				State = 296;
				stmt();
				}
				break;
			case 8:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 298;
				Match(T__21);
				State = 299;
				forInit();
				State = 300;
				expr(0);
				State = 301;
				Match(T__2);
				State = 302;
				expr(0);
				State = 303;
				stmt();
				}
				break;
			case 9:
				_localctx = new ForSliceContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 305;
				Match(T__21);
				State = 306;
				Match(ID);
				State = 307;
				Match(T__7);
				State = 308;
				Match(ID);
				State = 309;
				Match(T__3);
				State = 310;
				Match(T__22);
				State = 311;
				Match(ID);
				State = 312;
				stmt();
				}
				break;
			case 10:
				_localctx = new BreakStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 313;
				Match(T__23);
				State = 314;
				Match(T__2);
				}
				break;
			case 11:
				_localctx = new ContinueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 315;
				Match(T__24);
				State = 316;
				Match(T__2);
				}
				break;
			case 12:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 317;
				Match(T__25);
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 8733421127335937L) != 0)) {
					{
					State = 318;
					expr(0);
					}
				}

				State = 321;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclararvarContext declararvar() {
			return GetRuleContext<DeclararvarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 22, RULE_forInit);
		try {
			State = 328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324;
				declararvar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				expr(0);
				State = 326;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstCaseContext : ParserRuleContext {
		public InstCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instCase; } }
	 
		public InstCaseContext() { }
		public virtual void CopyFrom(InstCaseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstrucCaseContext : InstCaseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public InstrucCaseContext(InstCaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrucCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstCaseContext instCase() {
		InstCaseContext _localctx = new InstCaseContext(Context, State);
		EnterRule(_localctx, 24, RULE_instCase);
		int _la;
		try {
			_localctx = new InstrucCaseContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(T__26);
			State = 331;
			expr(0);
			State = 332;
			Match(T__9);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4485580839280088958L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) {
				{
				{
				State = 333;
				declaraciones();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstDefaultContext : ParserRuleContext {
		public InstDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instDefault; } }
	 
		public InstDefaultContext() { }
		public virtual void CopyFrom(InstDefaultContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstrucDefaultContext : InstDefaultContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext[] declaraciones() {
			return GetRuleContexts<DeclaracionesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaracionesContext declaraciones(int i) {
			return GetRuleContext<DeclaracionesContext>(i);
		}
		public InstrucDefaultContext(InstDefaultContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstrucDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstDefaultContext instDefault() {
		InstDefaultContext _localctx = new InstDefaultContext(Context, State);
		EnterRule(_localctx, 26, RULE_instDefault);
		int _la;
		try {
			_localctx = new InstrucDefaultContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			Match(T__27);
			State = 340;
			Match(T__9);
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4485580839280088958L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) {
				{
				{
				State = 341;
				declaraciones();
				}
				}
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignacionContext : ParserRuleContext {
		public AsignacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignacion; } }
	 
		public AsignacionContext() { }
		public virtual void CopyFrom(AsignacionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Decreme_UnoContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public Decreme_UnoContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecreme_Uno(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncAtoiContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncAtoiContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAtoi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncLenContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncLenContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncLen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Asig_DecreContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Asig_DecreContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsig_Decre(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncTypeOfContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncTypeOfContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Aumento_UnoContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public Aumento_UnoContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAumento_Uno(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignaMatrisContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AsignaMatrisContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignaMatris(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncParFloatContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncParFloatContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncAppendContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncAppendContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAppend(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignaListContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AsignaListContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignaList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Asig_AumentoContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Asig_AumentoContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsig_Aumento(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncJoinContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncJoinContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncIndexContext : AsignacionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FuncIndexContext(AsignacionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignacionContext asignacion() {
		AsignacionContext _localctx = new AsignacionContext(Context, State);
		EnterRule(_localctx, 28, RULE_asignacion);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new Asig_AumentoContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				Match(ID);
				State = 348;
				Match(T__28);
				State = 349;
				expr(0);
				}
				break;
			case 2:
				_localctx = new Asig_DecreContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 350;
				Match(ID);
				State = 351;
				Match(T__29);
				State = 352;
				expr(0);
				}
				break;
			case 3:
				_localctx = new Aumento_UnoContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 353;
				Match(ID);
				State = 354;
				Match(T__30);
				}
				break;
			case 4:
				_localctx = new Decreme_UnoContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 355;
				Match(ID);
				State = 356;
				Match(T__31);
				}
				break;
			case 5:
				_localctx = new FuncAtoiContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 357;
				Match(T__32);
				State = 358;
				Match(T__13);
				State = 359;
				expr(0);
				State = 360;
				Match(T__14);
				}
				break;
			case 6:
				_localctx = new FuncParFloatContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 362;
				Match(T__33);
				State = 363;
				Match(T__13);
				State = 364;
				expr(0);
				State = 365;
				Match(T__14);
				}
				break;
			case 7:
				_localctx = new FuncTypeOfContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 367;
				Match(T__34);
				State = 368;
				Match(T__13);
				State = 369;
				expr(0);
				State = 370;
				Match(T__14);
				}
				break;
			case 8:
				_localctx = new FuncIndexContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 372;
				Match(T__35);
				State = 373;
				Match(T__13);
				State = 374;
				Match(ID);
				State = 375;
				Match(T__7);
				State = 376;
				expr(0);
				State = 377;
				Match(T__14);
				}
				break;
			case 9:
				_localctx = new FuncJoinContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 379;
				Match(T__36);
				State = 380;
				Match(T__13);
				State = 381;
				Match(ID);
				State = 382;
				Match(T__7);
				State = 383;
				expr(0);
				State = 384;
				Match(T__14);
				}
				break;
			case 10:
				_localctx = new FuncLenContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 386;
				Match(T__37);
				State = 387;
				Match(T__13);
				State = 388;
				expr(0);
				State = 389;
				Match(T__14);
				}
				break;
			case 11:
				_localctx = new FuncAppendContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 391;
				Match(T__38);
				State = 392;
				Match(T__13);
				State = 393;
				Match(ID);
				State = 394;
				Match(T__7);
				State = 395;
				expr(0);
				State = 396;
				Match(T__14);
				}
				break;
			case 12:
				_localctx = new AsignaListContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 398;
				Match(ID);
				State = 399;
				Match(T__4);
				State = 400;
				expr(0);
				State = 401;
				Match(T__5);
				State = 402;
				Match(T__1);
				State = 403;
				expr(0);
				}
				break;
			case 13:
				_localctx = new AsignaMatrisContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 405;
				Match(ID);
				State = 406;
				Match(T__4);
				State = 407;
				expr(0);
				State = 408;
				Match(T__5);
				State = 409;
				Match(T__4);
				State = 410;
				expr(0);
				State = 411;
				Match(T__5);
				State = 412;
				Match(T__1);
				State = 413;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualitysContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualitysContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualitys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LlamadaFuncioContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LlamadaContext[] llamada() {
			return GetRuleContexts<LlamadaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LlamadaContext llamada(int i) {
			return GetRuleContext<LlamadaContext>(i);
		}
		public LlamadaFuncioContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLlamadaFuncio(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LanguageParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TipoNilContext : ExprContext {
		public TipoNilContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipoNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LanguageParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObtenerPosContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ObtenerPosContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObtenerPos(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegacionContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegacionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegacion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifaiderContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public IdentifaiderContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifaider(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumResContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SumResContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumRes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LanguageParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObtenerMatrisContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ObtenerMatrisContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObtenerMatris(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AsignaContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsignacionContext asignacion() {
			return GetRuleContext<AsignacionContext>(0);
		}
		public AsignaContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsigna(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelacionalContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelacionalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelacional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegarContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegarContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoollContext booll() {
			return GetRuleContext<BoollContext>(0);
		}
		public BooleanContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(LanguageParser.RUNE, 0); }
		public RuneContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				_localctx = new NegarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 418;
				Match(T__39);
				State = 419;
				expr(21);
				}
				break;
			case 2:
				{
				_localctx = new NegacionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 420;
				((NegacionContext)_localctx).op = Match(T__40);
				State = 421;
				expr(19);
				}
				break;
			case 3:
				{
				_localctx = new BooleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 422;
				booll();
				}
				break;
			case 4:
				{
				_localctx = new FloatContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 423;
				Match(FLOAT);
				}
				break;
			case 5:
				{
				_localctx = new RuneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 424;
				Match(RUNE);
				}
				break;
			case 6:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 425;
				Match(STRING);
				}
				break;
			case 7:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 426;
				Match(INT);
				}
				break;
			case 8:
				{
				_localctx = new TipoNilContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 427;
				Match(T__53);
				}
				break;
			case 9:
				{
				_localctx = new IdentifaiderContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 428;
				Match(ID);
				}
				break;
			case 10:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 429;
				Match(T__13);
				State = 430;
				expr(0);
				State = 431;
				Match(T__14);
				}
				break;
			case 11:
				{
				_localctx = new AsignaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 433;
				asignacion();
				}
				break;
			case 12:
				{
				_localctx = new ObtenerPosContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 434;
				Match(ID);
				State = 435;
				Match(T__4);
				State = 436;
				expr(0);
				State = 437;
				Match(T__5);
				}
				break;
			case 13:
				{
				_localctx = new ObtenerMatrisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 439;
				Match(ID);
				State = 440;
				Match(T__4);
				State = 441;
				expr(0);
				State = 442;
				Match(T__5);
				State = 443;
				Match(T__4);
				State = 444;
				expr(0);
				State = 445;
				Match(T__5);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 478;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 476;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 449;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 450;
						((MulDivContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325577728L) != 0)) ) {
							((MulDivContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 451;
						expr(19);
						}
						break;
					case 2:
						{
						_localctx = new SumResContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 452;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 453;
						((SumResContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__39 || _la==T__44) ) {
							((SumResContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 454;
						expr(18);
						}
						break;
					case 3:
						{
						_localctx = new RelacionalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 455;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 456;
						((RelacionalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055531162664960L) != 0)) ) {
							((RelacionalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 457;
						expr(17);
						}
						break;
					case 4:
						{
						_localctx = new EqualitysContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 458;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 459;
						((EqualitysContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__49 || _la==T__50) ) {
							((EqualitysContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 460;
						expr(16);
						}
						break;
					case 5:
						{
						_localctx = new AndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 461;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 462;
						((AndContext)_localctx).op = Match(T__51);
						State = 463;
						expr(15);
						}
						break;
					case 6:
						{
						_localctx = new OrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 464;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 465;
						((OrContext)_localctx).op = Match(T__52);
						State = 466;
						expr(14);
						}
						break;
					case 7:
						{
						_localctx = new AssignContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 467;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 468;
						Match(T__1);
						State = 469;
						expr(8);
						}
						break;
					case 8:
						{
						_localctx = new LlamadaFuncioContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 470;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 472;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 471;
								llamada();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 474;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LlamadaContext : ParserRuleContext {
		public LlamadaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_llamada; } }
	 
		public LlamadaContext() { }
		public virtual void CopyFrom(LlamadaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LlamaContext : LlamadaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public LlamaContext(LlamadaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLlama(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetsContext : LlamadaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public GetsContext(LlamadaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LlamadaContext llamada() {
		LlamadaContext _localctx = new LlamadaContext(Context, State);
		EnterRule(_localctx, 32, RULE_llamada);
		int _la;
		try {
			State = 488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				_localctx = new LlamaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 481;
				Match(T__13);
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 14)) & ~0x3f) == 0 && ((1L << (_la - 14)) & 8733421127335937L) != 0)) {
					{
					State = 482;
					args();
					}
				}

				State = 485;
				Match(T__14);
				}
				break;
			case T__16:
				_localctx = new GetsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				Match(T__16);
				State = 487;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			expr(0);
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 491;
				Match(T__7);
				State = 492;
				expr(0);
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoollContext : ParserRuleContext {
		public BoollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoollContext booll() {
		BoollContext _localctx = new BoollContext(Context, State);
		EnterRule(_localctx, 36, RULE_booll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_la = TokenStream.LA(1);
			if ( !(_la==T__54 || _la==T__55) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TiposContext : ParserRuleContext {
		public TiposContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipos(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TiposContext tipos() {
		TiposContext _localctx = new TiposContext(Context, State);
		EnterRule(_localctx, 38, RULE_tipos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4467570830351532032L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 20);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,69,503,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,5,0,42,8,0,10,0,
		12,0,45,9,0,1,1,1,1,1,1,1,1,3,1,51,8,1,1,2,1,2,1,2,1,2,1,2,3,2,58,8,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,75,8,2,
		5,2,77,8,2,10,2,12,2,80,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,
		109,8,2,10,2,12,2,112,9,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,123,
		8,2,5,2,125,8,2,10,2,12,2,128,9,2,1,2,1,2,1,2,3,2,133,8,2,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,3,3,142,8,3,5,3,144,8,3,10,3,12,3,147,9,3,1,4,1,4,1,4,
		3,4,152,8,4,5,4,154,8,4,10,4,12,4,157,9,4,1,5,1,5,1,5,1,5,5,5,163,8,5,
		10,5,12,5,166,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,5,6,175,8,6,10,6,12,6,178,
		9,6,1,6,1,6,1,7,1,7,1,7,3,7,185,8,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,193,8,
		8,1,8,1,8,3,8,197,8,8,1,8,1,8,5,8,201,8,8,10,8,12,8,204,9,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,215,8,8,1,8,1,8,3,8,219,8,8,1,8,1,8,5,8,
		223,8,8,10,8,12,8,226,9,8,1,8,3,8,229,8,8,1,9,1,9,3,9,233,8,9,1,9,1,9,
		1,9,3,9,238,8,9,5,9,240,8,9,10,9,12,9,243,9,9,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,3,10,254,8,10,5,10,256,8,10,10,10,12,10,259,9,10,1,
		10,1,10,1,10,1,10,5,10,265,8,10,10,10,12,10,268,9,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,279,8,10,1,10,1,10,1,10,1,10,5,10,285,
		8,10,10,10,12,10,288,9,10,1,10,3,10,291,8,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,320,8,10,1,10,3,10,323,8,
		10,1,11,1,11,1,11,1,11,3,11,329,8,11,1,12,1,12,1,12,1,12,5,12,335,8,12,
		10,12,12,12,338,9,12,1,13,1,13,1,13,5,13,343,8,13,10,13,12,13,346,9,13,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,416,8,
		14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,3,15,448,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		4,15,473,8,15,11,15,12,15,474,5,15,477,8,15,10,15,12,15,480,9,15,1,16,
		1,16,3,16,484,8,16,1,16,1,16,1,16,3,16,489,8,16,1,17,1,17,1,17,5,17,494,
		8,17,10,17,12,17,497,9,17,1,18,1,18,1,19,1,19,1,19,0,1,30,20,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,6,1,0,42,44,2,0,40,40,45,
		45,1,0,46,49,1,0,50,51,1,0,55,56,1,0,57,61,572,0,43,1,0,0,0,2,50,1,0,0,
		0,4,132,1,0,0,0,6,134,1,0,0,0,8,148,1,0,0,0,10,158,1,0,0,0,12,169,1,0,
		0,0,14,181,1,0,0,0,16,228,1,0,0,0,18,230,1,0,0,0,20,322,1,0,0,0,22,328,
		1,0,0,0,24,330,1,0,0,0,26,339,1,0,0,0,28,415,1,0,0,0,30,447,1,0,0,0,32,
		488,1,0,0,0,34,490,1,0,0,0,36,498,1,0,0,0,38,500,1,0,0,0,40,42,3,2,1,0,
		41,40,1,0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,1,1,0,0,0,45,
		43,1,0,0,0,46,51,3,4,2,0,47,51,3,20,10,0,48,51,3,16,8,0,49,51,3,12,6,0,
		50,46,1,0,0,0,50,47,1,0,0,0,50,48,1,0,0,0,50,49,1,0,0,0,51,3,1,0,0,0,52,
		53,5,1,0,0,53,54,5,62,0,0,54,57,3,38,19,0,55,56,5,2,0,0,56,58,3,30,15,
		0,57,55,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,60,5,3,0,0,60,133,1,0,0,
		0,61,62,5,62,0,0,62,63,5,4,0,0,63,64,3,30,15,0,64,65,5,3,0,0,65,133,1,
		0,0,0,66,67,5,62,0,0,67,68,5,4,0,0,68,69,5,5,0,0,69,70,5,6,0,0,70,71,3,
		38,19,0,71,78,5,7,0,0,72,74,3,30,15,0,73,75,5,8,0,0,74,73,1,0,0,0,74,75,
		1,0,0,0,75,77,1,0,0,0,76,72,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,
		1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,9,0,0,82,83,5,3,0,0,83,133,
		1,0,0,0,84,85,5,1,0,0,85,86,5,62,0,0,86,87,5,5,0,0,87,88,5,6,0,0,88,89,
		3,38,19,0,89,90,5,3,0,0,90,133,1,0,0,0,91,92,5,62,0,0,92,93,5,4,0,0,93,
		94,5,5,0,0,94,95,5,6,0,0,95,96,5,5,0,0,96,97,5,6,0,0,97,98,3,38,19,0,98,
		99,5,7,0,0,99,100,3,8,4,0,100,101,5,9,0,0,101,102,5,3,0,0,102,133,1,0,
		0,0,103,104,5,62,0,0,104,105,5,4,0,0,105,106,5,62,0,0,106,110,5,7,0,0,
		107,109,3,6,3,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,
		1,0,0,0,111,113,1,0,0,0,112,110,1,0,0,0,113,133,5,9,0,0,114,115,5,62,0,
		0,115,116,5,2,0,0,116,117,5,5,0,0,117,118,5,6,0,0,118,119,3,38,19,0,119,
		126,5,7,0,0,120,122,3,30,15,0,121,123,5,8,0,0,122,121,1,0,0,0,122,123,
		1,0,0,0,123,125,1,0,0,0,124,120,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,
		0,126,127,1,0,0,0,127,129,1,0,0,0,128,126,1,0,0,0,129,130,5,9,0,0,130,
		131,5,3,0,0,131,133,1,0,0,0,132,52,1,0,0,0,132,61,1,0,0,0,132,66,1,0,0,
		0,132,84,1,0,0,0,132,91,1,0,0,0,132,103,1,0,0,0,132,114,1,0,0,0,133,5,
		1,0,0,0,134,135,5,62,0,0,135,136,5,10,0,0,136,145,3,30,15,0,137,141,5,
		8,0,0,138,139,5,62,0,0,139,140,5,10,0,0,140,142,3,30,15,0,141,138,1,0,
		0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,137,1,0,0,0,144,147,1,0,0,0,145,
		143,1,0,0,0,145,146,1,0,0,0,146,7,1,0,0,0,147,145,1,0,0,0,148,155,3,10,
		5,0,149,151,5,8,0,0,150,152,3,10,5,0,151,150,1,0,0,0,151,152,1,0,0,0,152,
		154,1,0,0,0,153,149,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,
		0,0,0,156,9,1,0,0,0,157,155,1,0,0,0,158,159,5,7,0,0,159,164,3,30,15,0,
		160,161,5,8,0,0,161,163,3,30,15,0,162,160,1,0,0,0,163,166,1,0,0,0,164,
		162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,
		9,0,0,168,11,1,0,0,0,169,170,5,11,0,0,170,171,5,62,0,0,171,172,5,12,0,
		0,172,176,5,7,0,0,173,175,3,14,7,0,174,173,1,0,0,0,175,178,1,0,0,0,176,
		174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,5,
		9,0,0,180,13,1,0,0,0,181,184,5,62,0,0,182,185,3,38,19,0,183,185,5,62,0,
		0,184,182,1,0,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,187,5,3,0,0,187,
		15,1,0,0,0,188,189,5,13,0,0,189,190,5,62,0,0,190,192,5,14,0,0,191,193,
		3,18,9,0,192,191,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,196,5,15,
		0,0,195,197,3,38,19,0,196,195,1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,
		198,202,5,7,0,0,199,201,3,2,1,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,
		1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,229,5,9,0,
		0,206,207,5,13,0,0,207,208,5,14,0,0,208,209,5,62,0,0,209,210,5,62,0,0,
		210,211,5,15,0,0,211,212,5,62,0,0,212,214,5,14,0,0,213,215,3,18,9,0,214,
		213,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,218,5,15,0,0,217,219,3,
		38,19,0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,224,5,7,0,
		0,221,223,3,2,1,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,
		225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,229,5,9,0,0,228,188,1,
		0,0,0,228,206,1,0,0,0,229,17,1,0,0,0,230,232,5,62,0,0,231,233,3,38,19,
		0,232,231,1,0,0,0,232,233,1,0,0,0,233,241,1,0,0,0,234,235,5,8,0,0,235,
		237,5,62,0,0,236,238,3,38,19,0,237,236,1,0,0,0,237,238,1,0,0,0,238,240,
		1,0,0,0,239,234,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,
		0,242,19,1,0,0,0,243,241,1,0,0,0,244,245,3,30,15,0,245,246,5,3,0,0,246,
		323,1,0,0,0,247,248,5,16,0,0,248,249,5,17,0,0,249,250,5,18,0,0,250,257,
		5,14,0,0,251,253,3,30,15,0,252,254,5,8,0,0,253,252,1,0,0,0,253,254,1,0,
		0,0,254,256,1,0,0,0,255,251,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,
		258,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,5,15,0,0,261,323,5,
		3,0,0,262,266,5,7,0,0,263,265,3,2,1,0,264,263,1,0,0,0,265,268,1,0,0,0,
		266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,266,1,0,0,0,269,323,
		5,9,0,0,270,271,3,28,14,0,271,272,5,3,0,0,272,323,1,0,0,0,273,274,5,19,
		0,0,274,275,3,30,15,0,275,278,3,20,10,0,276,277,5,20,0,0,277,279,3,20,
		10,0,278,276,1,0,0,0,278,279,1,0,0,0,279,323,1,0,0,0,280,281,5,21,0,0,
		281,282,3,30,15,0,282,286,5,7,0,0,283,285,3,24,12,0,284,283,1,0,0,0,285,
		288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,290,1,0,0,0,288,286,1,
		0,0,0,289,291,3,26,13,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,
		0,292,293,5,9,0,0,293,323,1,0,0,0,294,295,5,22,0,0,295,296,3,30,15,0,296,
		297,3,20,10,0,297,323,1,0,0,0,298,299,5,22,0,0,299,300,3,22,11,0,300,301,
		3,30,15,0,301,302,5,3,0,0,302,303,3,30,15,0,303,304,3,20,10,0,304,323,
		1,0,0,0,305,306,5,22,0,0,306,307,5,62,0,0,307,308,5,8,0,0,308,309,5,62,
		0,0,309,310,5,4,0,0,310,311,5,23,0,0,311,312,5,62,0,0,312,323,3,20,10,
		0,313,314,5,24,0,0,314,323,5,3,0,0,315,316,5,25,0,0,316,323,5,3,0,0,317,
		319,5,26,0,0,318,320,3,30,15,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,
		1,0,0,0,321,323,5,3,0,0,322,244,1,0,0,0,322,247,1,0,0,0,322,262,1,0,0,
		0,322,270,1,0,0,0,322,273,1,0,0,0,322,280,1,0,0,0,322,294,1,0,0,0,322,
		298,1,0,0,0,322,305,1,0,0,0,322,313,1,0,0,0,322,315,1,0,0,0,322,317,1,
		0,0,0,323,21,1,0,0,0,324,329,3,4,2,0,325,326,3,30,15,0,326,327,5,3,0,0,
		327,329,1,0,0,0,328,324,1,0,0,0,328,325,1,0,0,0,329,23,1,0,0,0,330,331,
		5,27,0,0,331,332,3,30,15,0,332,336,5,10,0,0,333,335,3,2,1,0,334,333,1,
		0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,25,1,0,0,0,338,
		336,1,0,0,0,339,340,5,28,0,0,340,344,5,10,0,0,341,343,3,2,1,0,342,341,
		1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,27,1,0,0,0,
		346,344,1,0,0,0,347,348,5,62,0,0,348,349,5,29,0,0,349,416,3,30,15,0,350,
		351,5,62,0,0,351,352,5,30,0,0,352,416,3,30,15,0,353,354,5,62,0,0,354,416,
		5,31,0,0,355,356,5,62,0,0,356,416,5,32,0,0,357,358,5,33,0,0,358,359,5,
		14,0,0,359,360,3,30,15,0,360,361,5,15,0,0,361,416,1,0,0,0,362,363,5,34,
		0,0,363,364,5,14,0,0,364,365,3,30,15,0,365,366,5,15,0,0,366,416,1,0,0,
		0,367,368,5,35,0,0,368,369,5,14,0,0,369,370,3,30,15,0,370,371,5,15,0,0,
		371,416,1,0,0,0,372,373,5,36,0,0,373,374,5,14,0,0,374,375,5,62,0,0,375,
		376,5,8,0,0,376,377,3,30,15,0,377,378,5,15,0,0,378,416,1,0,0,0,379,380,
		5,37,0,0,380,381,5,14,0,0,381,382,5,62,0,0,382,383,5,8,0,0,383,384,3,30,
		15,0,384,385,5,15,0,0,385,416,1,0,0,0,386,387,5,38,0,0,387,388,5,14,0,
		0,388,389,3,30,15,0,389,390,5,15,0,0,390,416,1,0,0,0,391,392,5,39,0,0,
		392,393,5,14,0,0,393,394,5,62,0,0,394,395,5,8,0,0,395,396,3,30,15,0,396,
		397,5,15,0,0,397,416,1,0,0,0,398,399,5,62,0,0,399,400,5,5,0,0,400,401,
		3,30,15,0,401,402,5,6,0,0,402,403,5,2,0,0,403,404,3,30,15,0,404,416,1,
		0,0,0,405,406,5,62,0,0,406,407,5,5,0,0,407,408,3,30,15,0,408,409,5,6,0,
		0,409,410,5,5,0,0,410,411,3,30,15,0,411,412,5,6,0,0,412,413,5,2,0,0,413,
		414,3,30,15,0,414,416,1,0,0,0,415,347,1,0,0,0,415,350,1,0,0,0,415,353,
		1,0,0,0,415,355,1,0,0,0,415,357,1,0,0,0,415,362,1,0,0,0,415,367,1,0,0,
		0,415,372,1,0,0,0,415,379,1,0,0,0,415,386,1,0,0,0,415,391,1,0,0,0,415,
		398,1,0,0,0,415,405,1,0,0,0,416,29,1,0,0,0,417,418,6,15,-1,0,418,419,5,
		40,0,0,419,448,3,30,15,21,420,421,5,41,0,0,421,448,3,30,15,19,422,448,
		3,36,18,0,423,448,5,64,0,0,424,448,5,66,0,0,425,448,5,65,0,0,426,448,5,
		63,0,0,427,448,5,54,0,0,428,448,5,62,0,0,429,430,5,14,0,0,430,431,3,30,
		15,0,431,432,5,15,0,0,432,448,1,0,0,0,433,448,3,28,14,0,434,435,5,62,0,
		0,435,436,5,5,0,0,436,437,3,30,15,0,437,438,5,6,0,0,438,448,1,0,0,0,439,
		440,5,62,0,0,440,441,5,5,0,0,441,442,3,30,15,0,442,443,5,6,0,0,443,444,
		5,5,0,0,444,445,3,30,15,0,445,446,5,6,0,0,446,448,1,0,0,0,447,417,1,0,
		0,0,447,420,1,0,0,0,447,422,1,0,0,0,447,423,1,0,0,0,447,424,1,0,0,0,447,
		425,1,0,0,0,447,426,1,0,0,0,447,427,1,0,0,0,447,428,1,0,0,0,447,429,1,
		0,0,0,447,433,1,0,0,0,447,434,1,0,0,0,447,439,1,0,0,0,448,478,1,0,0,0,
		449,450,10,18,0,0,450,451,7,0,0,0,451,477,3,30,15,19,452,453,10,17,0,0,
		453,454,7,1,0,0,454,477,3,30,15,18,455,456,10,16,0,0,456,457,7,2,0,0,457,
		477,3,30,15,17,458,459,10,15,0,0,459,460,7,3,0,0,460,477,3,30,15,16,461,
		462,10,14,0,0,462,463,5,52,0,0,463,477,3,30,15,15,464,465,10,13,0,0,465,
		466,5,53,0,0,466,477,3,30,15,14,467,468,10,7,0,0,468,469,5,2,0,0,469,477,
		3,30,15,8,470,472,10,20,0,0,471,473,3,32,16,0,472,471,1,0,0,0,473,474,
		1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,449,1,0,0,
		0,476,452,1,0,0,0,476,455,1,0,0,0,476,458,1,0,0,0,476,461,1,0,0,0,476,
		464,1,0,0,0,476,467,1,0,0,0,476,470,1,0,0,0,477,480,1,0,0,0,478,476,1,
		0,0,0,478,479,1,0,0,0,479,31,1,0,0,0,480,478,1,0,0,0,481,483,5,14,0,0,
		482,484,3,34,17,0,483,482,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,
		489,5,15,0,0,486,487,5,17,0,0,487,489,5,62,0,0,488,481,1,0,0,0,488,486,
		1,0,0,0,489,33,1,0,0,0,490,495,3,30,15,0,491,492,5,8,0,0,492,494,3,30,
		15,0,493,491,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,
		35,1,0,0,0,497,495,1,0,0,0,498,499,7,4,0,0,499,37,1,0,0,0,500,501,7,5,
		0,0,501,39,1,0,0,0,45,43,50,57,74,78,110,122,126,132,141,145,151,155,164,
		176,184,192,196,202,214,218,224,228,232,237,241,253,257,266,278,286,290,
		319,322,328,336,344,415,447,474,476,478,483,488,495
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
